"""协程：微线程，它是实现多任务的另一种方式，只不过是比线程更小的执行单元。因为它自带CPU的上下文，这样只要在合适的时机，我们可以把一个协程切换到另一个协程。进程>线程>协程通俗的理解：    在一个线程中的某个函数中，我们可以在任何地方保存当前函数的一些临时变量等信息，    然后切换到另外一个函数中执行，注意不是通过调用函数的方式做到的，    并且切换的次数以及什么时候再切换到原来的函数都由开发者自己确定。协程与线程的差异：    在实现多任务时, 线程切换从系统层面远不止保存和恢复CPU上下文这么简单。    操作系统为了程序运行的高效性，每个线程都有自己缓存Cache等等数据，    操作系统还会帮你做这些数据的恢复操作，所以线程的切换非常耗性能。    但是协程的切换只是单纯地操作CPU的上下文__，所以一秒钟切换个上百万次系统都抗的住。在python中，yield（生成器）可以很容易的实现上述的功能，从一个函数切换到另外一个函数。协程的低层通过生成器完成"""import timedef task1():    for i in range(3):        print('A' + str(i))        yield        time.sleep(1)def task2():    for i in range(3):        print('B' + str(i))        yield        time.sleep(2)if __name__ == '__main__':    g1 = task1()    g2 = task2()    # print(type(g1))    while True:        try:            next(g1)            next(g2)        except:            break