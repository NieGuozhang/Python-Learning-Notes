"""共享数据：若多个线程共同对某个数据修改，则可能出现不可预料的结果，为了保证数据的正确性，需要对多个线程进行同步。锁 Locklock = threading.Lock()lock.acquire() #获得锁lock.release() # 释放锁只要不释放锁，其他的线程都不能进入运行状态"""import threadingimport time, randomlock = threading.Lock()list1 = [0] * 10def task1():    # 获取线程锁，如果已经上锁，则等待锁的释放    # lock.acquire()  # 阻塞    for i in range(len(list1)):        list1[i] = 1        time.sleep(0.5)    # lock.release()  # 释放锁def task2():    # lock.acquire()  # 阻塞    for i in range(len(list1)):        print('---->', list1[i])        time.sleep(0.5)    # lock.release()if __name__ == '__main__':    t1 = threading.Thread(target=task1)    t2 = threading.Thread(target=task2)    t2.start()    t1.start()    t2.join()    t1.join()    print(list1)