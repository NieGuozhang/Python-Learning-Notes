# 装饰器'''    加入购物车，付款，修改收货地址    判断用户的登录状态'''# def w1(func):#     print('装饰器1开始修饰。')##     def inner():#         print('权限1验证！')#         func()##     return inner### def w2(func):#     print('装饰器2开始修饰。')##     def inner():#         print('权限2验证！')#         func()##     return inner### def test():#     print('test')### def func(number):#     a = 100##     def inner_func():#         nonlocal a#         nonlocal number#         number += 1#         for i in range(number):#             a += 1#         print('修改后的a:', a)##     return inner_func### f = func(5)# f()## # 函数作为参数# a = 50## f1 = func(a)# print(f1)# f1()### # 地址引用# def test():#     print('------------test-------------')### def func(f):#     print(f)#     f()#     print('------->func')## func(test)'''特点：1.函数A是作为参数出现的（函数B就接受函数A为参数）2.要有闭包的特点'''# 定义一个装饰器def decorator(func):    print('wrapper外层打印测试')    def wrapper():        func()        print('----------刷漆')    print('wrapper加载完成')    return wrapper# 使用装饰器@decorator  # 相当于house = decorator(house)def house():    print('我是一个毛坯房....')#house()print(house)