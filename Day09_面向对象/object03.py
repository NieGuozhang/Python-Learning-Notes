# 在开发中看到一些私有化的处理：装饰器class Student:    # __age = 18  # 类属性    def __init__(self, name, age):        self.name = name        self.__age = age        self.__score = 59  # 私有化    # 先有getXXX    @property    def age(self):        return self.__age    # 再有setXXX，因为set依赖get    @age.setter    def age(self, age):        self.__age = age    # # 定义公有的set和get方法    # def setAge(self, age):    #     if age > 0 and age <= 120:    #         self.__age = age    #     else:    #         print('年龄不在规定的范围内。')    #    # def getAge(self):    #     return self.__age    def __str__(self):        return '姓名:{},年龄:{},分数:{}'.format(self.name, self.__age, self.__score)s = Student('Nieguozhang', 25)s.name = '张三'print(s)s.age=90print(s.age)print(s)